# Constants for weight limits and prices
CEMENT_WEIGHT_MIN = 24.9
CEMENT_WEIGHT_MAX = 25.1
GRAVEL_SAND_WEIGHT_MIN = 49.9
GRAVEL_SAND_WEIGHT_MAX = 50.1
CEMENT_PRICE = 3
GRAVEL_SAND_PRICE = 2
SPECIAL_PACK_PRICE = 10

def validate_sack(contents, weight):
    if contents not in ['C', 'G', 'S']:
        return "Invalid contents. Accepted values: C (cement), G (gravel), S (sand)"
    
    if contents == 'C' and not (CEMENT_WEIGHT_MIN < weight < CEMENT_WEIGHT_MAX):
        return "Invalid weight for cement sack. Must be between 24.9 and 25.1 kilograms"
    
    if contents in ['G', 'S'] and not (GRAVEL_SAND_WEIGHT_MIN < weight < GRAVEL_SAND_WEIGHT_MAX):
        return f"Invalid weight for {contents.lower()} sack. Must be between 49.9 and 50.1 kilograms"
    
    return None

def task1():
    print("TASK 1 - Check the contents and weight of a single sack")
    
    contents = input("Enter the contents of the sack (C for cement, G for gravel, S for sand): ").upper()
    weight = float(input("Enter the weight of the sack in kilograms: "))
    
    validation_result = validate_sack(contents, weight)
    
    if validation_result is None:
        print(f"\nAccepted sack - Contents: {contents}, Weight: {weight} kilograms")
    else:
        print(f"\nRejected sack - {validation_result}")

def task2():
    print("\nTASK 2 - Check a customer’s order for delivery")
    
    total_weight = 0
    sacks_rejected = 0
    
    num_cement = int(input("Enter the number of cement sacks: "))
    num_gravel = int(input("Enter the number of gravel sacks: "))
    num_sand = int(input("Enter the number of sand sacks: "))
    
    for _ in range(num_cement):
        contents = 'C'
        weight = float(input(f"Enter the weight of cement sack {_ + 1} in kilograms: "))
        validation_result = validate_sack(contents, weight)
        if validation_result:
            print(f"Sack {_ + 1} rejected - {validation_result}")
            sacks_rejected += 1
        else:
            total_weight += weight
    
    for _ in range(num_gravel):
        contents = 'G'
        weight = float(input(f"Enter the weight of gravel sack {_ + 1} in kilograms: "))
        validation_result = validate_sack(contents, weight)
        if validation_result:
            print(f"Sack {_ + 1} rejected - {validation_result}")
            sacks_rejected += 1
        else:
            total_weight += weight
    
    for _ in range(num_sand):
        contents = 'S'
        weight = float(input(f"Enter the weight of sand sack {_ + 1} in kilograms: "))
        validation_result = validate_sack(contents, weight)
        if validation_result:
            print(f"Sack {_ + 1} rejected - {validation_result}")
            sacks_rejected += 1
        else:
            total_weight += weight
    
    print(f"\nTotal weight of the order: {total_weight} kilograms")
    print(f"Number of sacks rejected: {sacks_rejected}")

def task3():
    print("\nTASK 3 - Calculate the price for a customer’s order")
    
    total_price = 0
    num_special_packs = 0
    
    num_cement = int(input("Enter the number of cement sacks: "))
    num_gravel = int(input("Enter the number of gravel sacks: "))
    num_sand = int(input("Enter the number of sand sacks: "))
    
    # Calculate regular price
    total_price += num_cement * CEMENT_PRICE
    total_price += (num_gravel + num_sand) * GRAVEL_SAND_PRICE
    
    # Check for special packs
    num_special_packs = min(num_cement, num_gravel // 2, num_sand // 2)
    
    # Calculate discounted price if special packs exist
    total_price -= num_special_packs * (CEMENT_PRICE + 2 * GRAVEL_SAND_PRICE)
    
    print(f"\nRegular price for the order: ${total_price}")
    
    if num_special_packs > 0:
        discount_amount = num_special_packs * SPECIAL_PACK_PRICE
        discounted_price = total_price - discount_amount
        print(f"Special pack discount applied! New price: ${discounted_price}")
        print(f"Amount saved: ${discount_amount}")

if __name__ == "__main__":
    task1()
    task2()
    task3()
